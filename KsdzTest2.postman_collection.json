{
	"info": {
		"_postman_id": "874e426c-8628-43b8-a4f3-a02c906e6211",
		"name": "KsdzTest2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" let jsonData = JSON.parse(responseBody) ;\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Katja",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123456",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//проверка статус кода\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//проверка структуры json в ответе\r",
							"let schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"};\r",
							"let data1 = pm.response.json() ;\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"//проверка правильности умножения\r",
							"pm.test(\"Correct salary after x month\", function() {\r",
							"   let jsonData = JSON.parse(responseBody);\r",
							"     pm.expect(jsonData.qa_salary_after_6_months).to.equal(jsonData.start_qa_salary*2);\r",
							"   pm.expect(jsonData.qa_salary_after_12_months).to.equal(jsonData.start_qa_salary*2.9);\r",
							"   pm.expect(jsonData.person.u_salary_1_5_year).to.equal(jsonData.start_qa_salary*4);\r",
							"}\r",
							");\r",
							"\r",
							"\r",
							"//передача значения в salary1,5\r",
							"pm.test(\"Set salary1,5 value\", function(){\r",
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"salary\",jsonData.person.u_salary_1_5_year);\r",
							"}\r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\":18,\r\n    \"salary\":1000,\r\n    \"name\":\"Katja\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//проверка статус кода\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//проверка структуры json в ответе\r",
							"pm.test(\"Schema is valid\", function(){\r",
							"let schema = \r",
							"{\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"let data1 = pm.response.json();\r",
							"pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"    \r",
							"});\r",
							"\r",
							"\r",
							"//проверка правильности умножения зп\r",
							"pm.test(\"Salary is correct\", function(){\r",
							"    let jsonData = JSON.parse(responseBody);\r",
							"    let salary2 = parseInt(jsonData[\"salary\"][1]); \r",
							"    let salary3 = parseInt(jsonData[\"salary\"][2]);\r",
							" pm.expect(salary2).to.equal(jsonData.salary[0]*2);\r",
							" pm.expect(salary3).to.equal(jsonData.salary[0]*3);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//проверка сравнения 2 элемент больше 1 и 0\r",
							"pm.test(\"Last array elements are more than first one\", function(){\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"console.log(jsonData[\"salary\"][2]);\r",
							" let salary2 = parseInt(jsonData[\"salary\"][1]); \r",
							" let salary3 = parseInt(jsonData[\"salary\"][2]);\r",
							"pm.expect(salary2).to.be.greaterThan(jsonData[\"salary\"][0]);\r",
							"pm.expect(salary3).to.be.greaterThan(jsonData[\"salary\"][0]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "18",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Katja",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//проверка статуса\r",
							"pm.test(\"Status is 200\", function(){\r",
							"pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//проверка структуры json в ответе\r",
							"pm.test(\"Schema is valid\", function(){\r",
							"    let schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"};\r",
							"let data1 = pm.response.json();\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//проверка правильности умножения\r",
							"pm.test(\"Food and sleep correct\", function(){\r",
							"    let jsonData = JSON.parse(responseBody);\r",
							"    let req = request.data;\r",
							"    let weight = parseInt(req.weight);\r",
							"    pm.expect(jsonData.daily_food).to.equal(weight*0.012);\r",
							"    pm.expect(jsonData.daily_sleep).to.equal(weight*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "18",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "10",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Katja",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//проверка статуса\r",
							"pm.test(\"Status in 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//проверка структуры \r",
							"pm.test(\"Schema is correct\", function(){\r",
							"    let schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"let data1 = pm.response.json();\r",
							"pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// form name = env name\r",
							"pm.test(\"FormName=EnvName\", function(){\r",
							"    let jsonData = JSON.parse(responseBody);\r",
							"    let req = request.data;\r",
							"    pm.expect(jsonData.name).to.be.equal(req.name);\r",
							"});\r",
							"\r",
							"//age in response is the same as age in request\r",
							"pm.test(\"ResponseName=RequestName\", function(){\r",
							"    let jsonData = JSON.parse(responseBody);\r",
							"    let req = request.data;\r",
							"    pm.expect(req.age).to.be.equal(jsonData.age);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "18",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Katja",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//передать CurrID  в переменную окружения\r",
							"pm.test(\"Add random CurID to EnvVariable\", function(){\r",
							"    let jsonData = JSON.parse(responseBody) ;\r",
							"    let ranitem = jsonData[Math.floor(Math.random()*jsonData.length)];\r",
							"    console.log(ranitem.Cur_ID);\r",
							"    postman.setEnvironmentVariable(\"CurID\", ranitem.Cur_ID);\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//проверка статуса\r",
							"pm.test(\"Status is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"} );\r",
							"\r",
							"//проверка структуры json \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{CurID}} ",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}